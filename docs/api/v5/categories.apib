# Group Categories

Categories can be used to organize, group, and quickly reference related content within the Ushahidi Platform. 
## Categories [/api/v5/categories]
## What's new?
- Categories can be translated to multiple languages.
- Categories bring their parent and child relationships with them by default


## Get a Category [GET /api/v5/categories/{id}]

- You will only be able to get the categories that you are allowed to see based on the user permissions you have and
the restrictions set by the deployment owner. 
- An invalid Authorization token will result in a 401.
 
+ Request With Valid token

    + Headers
            
            Authorization: Bearer validToken
            Accept: application/json
            Content-type: application/json

+ Response 200 (application/json)
    + Attributes (Category)

+ Request With Invalid or Expired token

    + Headers
            
            Authorization: Bearer invalidOrExpireToken
+ Response 401 (application/json)
    + Attributes (Server error response)

+ Request Get non existent category

    + Parameters
        + id: `non-existent`

+ Response 404 (application/json)

    + Attributes (Not Found error response)

## List All Categories [GET /api/v5/categories]
 
+ Request With Valid token

    + Headers
        
            Authorization: Bearer validToken
            Accept: application/json
            Content-type: application/json
+ Response 200 (application/json)

    + Attributes
        + results (array[Category])

## Create a category [POST /api/v5/categories]
 
- You will only be able to create categories using a user's token that is authorized for that action. 
- Permissions used by this: MANAGE POSTS, or ADMIN.

+ Request With Valid token

    + Headers
        
            Authorization: Bearer validToken
            Accept: application/json
            Content-type: application/json
+ Request (application/json)

    + Attributes (NewCategory)

+ Response 200 (application/json)

    + Attributes (Category)

+ Request With Invalid or Expired token

    + Headers
            
            Authorization: Bearer invalidOrExpireToken
+ Response 401 (application/json)
    + Attributes (Server error response)

+ Request With invalid data (application/json)

    + Attributes (NewCategory)

+ Response 422 (application/json)

    + Attributes (Validation error response)

## Update a category [PUT /api/v5/categories/{id}]

+ Parameters

    + id: 1 (number) - ID of the Category

+ Request (application/json)

    + Attributes (Category)

+ Response 200 (application/json)

    + Attributes (Category)

+ Request With Invalid or Expired token
    + Headers

            Authorization: Bearer invalidOrExpireToken
+ Response 401 (application/json)
    + Attributes (Server error response)

+ Request With invalid data (application/json)

    + Attributes (Category)

+ Response 422 (application/json)

    + Attributes (Validation error response)


+ Request Update non existent category

    + Parameters
        + id: `non-existent`

+ Response 404 (application/json)

    + Attributes (Not Found error response)


## Delete a Category [DELETE /api/v5/categories/{id}]

+ Parameters

    + id: 1 (number) - ID of the Category

+ Request Delete a category

    + Parameters
        + id: 123

+ Response 200 (application/json)

    + Attributes (DeletedObject)

+ Request With Invalid or Expired token

    + Headers
            
            Authorization: Bearer invalidOrExpireToken
+ Response 401 (application/json)
    + Attributes (Server error response)

+ Request Delete non existent category

    + Parameters
        + id: `non-existent`

+ Response 404 (application/json)

    + Attributes (Not Found error response)

## Data Structures

### DeletedObject
+ result (object)
    + deleted (number): {id}

### Category (object)
#### Properties
+ id: 530 (number) - An id
+ parent_id (number, nullable)
+ parent (Category, nullable)
+ tag: Some Tag (string, required)
+ slug: `some-tag` (string)    
+ type: category (enum[string])
    + Members
        + category
+ color: #00ff00 (string, nullable)
+ icon: marker (string, nullable)
+ description (string, nullable)
+ role (array[string])
    + role1
    + role2
+ priority (number)
+ `children` (array[Category], optional, fixed-type)
+ translations (TranslationValues)
+ enabled_languages (object)
    + default (string)
    + available (array)

### NewCategory (object)
#### Properties
+ parent_id (number, nullable)
+ tag: Some Tag (string, required)
+ slug: `some-tag` (string)    
+ type: category (enum[string])
    + Members
        + category
+ color: #00ff00 (string, nullable)
+ icon: marker (string, nullable)
+ description (string, nullable)
+ role (array[string])
    + role1
    + role2
+ priority (number)
+ `children` (array[Category], optional, fixed-type)
+ translations (TranslationValues)
+ enabled_languages (object)
    + default (string)
    + available (array)

### TranslationValues (object)
The translations object contains the translations to each available language, within the language key's object.


#### Properties
+ *langkey (string)* (object)  - this key will be a language code like "en"
    + *key_to_translate (string)*: A translated value (string)
## Sample    
+ *es (string)* (object) - this key will be a language code like "en"
    + *title (string)*: The title of a post (string)
    + *description (string)*: The description of a post (string)    
#### Examples
```
{
    "en": {
        "label: "Title of a field",
        "instructions": "Fill in instructions" 
    }
}
```
